pipeline {
    agent any
    
    environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.122.1:8081"
        NEXUS_REPOSITORY = "springboot"
        NEXUS_CREDENTIAL_ID = "nexus3"
	}
	 tools {
        maven 'M2_HOME'
        jdk 'JAVA_HOME'
    }
 
	
	   
    stages {
       stage ('SCM CHECKOUT') {
    steps {
      git branch: 'Yahia_ModuleFornisseur', url: 'https://github.com/yassinedarwezi/DevOps.git' }}
      stage('Maven Version'){
            steps {
                sh 'mvn -version'
            }
        }
	 stage('compile'){
            steps {
                sh 'mvn compile -e'
            }
        }
	
	
        
        stage('Maven Package') {
             steps {
                sh 'mvn clean package -DskipTests'
            
            }
        }
	
	
	 stage('Clean') {
            steps {
                sh 'mvn clean'
            }
        }
      
	
	 stage('test'){
            steps {
                sh 'mvn test'
            }
	     post { 
         always { 
           junit '**/target/surefire-reports/*.xml'
           jacoco execPattern: 'target/jacoco.exec'  
       }
        } 
	
          stage("scan"){
        steps {
                withSonarQubeEnv ( installationName: 'SonarQube-8.9.7'){
                sh 'mvn sonar:sonar'
		-Dsonar.projectKey=project-jenkins-pipeline1 \
                -Dsonar.host.url=http://192.168.56.1:9000 \
                -Dsonar.coverage.jacoco.xmlReportPaths=../target/site/jacoco-aggregate/jacoco.xml """    
                }
        }
        }  
         
	 stage("Publish to Nexus Repository Manager") {
            steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }

        
	

    }
}
